from z3 import *

SBOX_DATA = [
    0xc8,0x7a,0x58,0x65,0x7b,0x0f,0x88,0x69,0xbf,0x66,0x73,0xf5,0xa9,0x1d,
    0xd5,0x1a,0xd4,0x67,0x61,0x26,0x31,0x5f,0xfb,0x34,0x29,0xf2,0x49,0x36,
    0x0d,0x83,0x1e,0x42,0x4c,0xd0,0xa5,0x0b,0x09,0x91,0xe9,0xdf,0x72,0x93,
    0xc2,0xb0,0x7e,0x47,0x30,0x46,0x6a,0x8e,0x01,0xe2,0xe0,0x81,0x02,0x6b,
    0x07,0xdd,0x70,0xa4,0x53,0x00,0x41,0x52,0x59,0xaa,0xf7,0xc4,0xd2,0xed,
    0xff,0x62,0xf9,0xe4,0x95,0x35,0x23,0xa1,0x20,0x3b,0x0a,0x2c,0x5c,0x9b,
    0x22,0xb3,0xf3,0x9a,0x2b,0x19,0xce,0x54,0x82,0xef,0xad,0x06,0x5d,0xec,
    0x3a,0xd8,0x9f,0x0c,0x80,0x2a,0x44,0x99,0xd7,0xb5,0xe7,0x4d,0xb4,0x39,
    0xe5,0x4a,0xc7,0x40,0x3d,0x87,0x21,0x4b,0xbb,0x89,0x45,0x50,0xd6,0xaf,
    0x60,0xbd,0x11,0x3e,0xcc,0xba,0x6d,0x84,0xe3,0xbe,0xa8,0x94,0x55,0x7c,
    0xd3,0x25,0x9d,0x38,0xb7,0xb6,0x8a,0x85,0xf0,0x33,0xf4,0x1b,0x1c,0xd9,
    0xd1,0xb1,0x90,0x3f,0x98,0xc9,0xfc,0xe1,0x68,0x32,0x86,0x37,0xcf,0x4e,
    0xc1,0x4f,0x10,0x15,0xa2,0x04,0x64,0xbc,0xc5,0x9c,0x18,0x0e,0x8d,0xcb,
    0x14,0x74,0x56,0x6c,0xca,0x8b,0x7f,0x79,0xa6,0x96,0xf8,0xb9,0x97,0xfd,
    0xa0,0x16,0xdb,0xfa,0xea,0x2d,0xa7,0xde,0x3c,0x13,0x1f,0x03,0x6f,0xdc,
    0xab,0x12,0x5b,0xf6,0x24,0xc3,0x17,0xda,0xb8,0xc6,0xe8,0x9e,0xcd,0x92,
    0xa3,0x7d,0xe6,0x05,0x57,0x43,0x5a,0x8f,0x28,0xc0,0x48,0xac,0xb2,0x5e,
    0x51,0x27,0xeb,0x63,0xee,0x8c,0xfe,0xae,0x2e,0x76,0x78,0xf1,0x6e,0x08,
    0x2f,0x77,0x71,0x75
]

# sbox to array
SBOX = Array('SBOX', BitVecSort(8), BitVecSort(8))
for i in range(256):
    SBOX = Store(SBOX, BitVecVal(i, 8), BitVecVal(SBOX_DATA[i], 8))

reg = [
    0x11111111,0x22222222,0x33333333,0x44444444,
    0x55555555,0x66666666,0x77777777,0x88888888
]

reg = [BitVecVal(x, 32) for x in reg]

MAGIC = [
    0x90111111,
    0xb8222222,
    0x28333333,
    0x2a444444,
    0xba555555,
    0x92666666, 
    0x02777777,
    0x02888888,
]

# MAGIC = [# for debug
#     0x9c111111,
#     0xb222222,
#     0x97333333,
#     0x2f444444,
#     0xb3555555,
#     0x24666666,
#     0xb8777777,
#     0xfd888888,
# ]

S = Solver()


flag_text = 'midnight{???l???Z???4???T???b??}'
flag_text = 'midnight{???l??_Z???4??_T???b??}'



assert len(flag_text) == 32, "Flag text must be 32 characters long"

alphabet_bounds = [
    # [33,47], # special chars
    [95, 95], # _
    [58,57], # numbs
    # [65,90], # uppercase
    [97,122], # lowercase
]

flag = [BitVec(f'flag_{i}', 8) for i in range(len(flag_text))]
for i in range(len(flag_text)):
    if flag_text[i] != '?': 
        S.add(flag[i] == ord(flag_text[i]))
    else:
        S.add(Or(
            And(flag[i] >= alphabet_bounds[0][0], flag[i] <= alphabet_bounds[0][1]),
            And(flag[i] >= alphabet_bounds[1][0], flag[i] <= alphabet_bounds[1][1]),
            And(flag[i] >= alphabet_bounds[2][0], flag[i] <= alphabet_bounds[2][1])
        ))

flag_sboxed = []
for i in range(len(flag)):
    flag_sboxed.append(SBOX[flag[i]])

state = []
for i in range(8):
    state.append(Concat(flag_sboxed[4*i+3],flag_sboxed[4*i+2],flag_sboxed[4*i+1],flag_sboxed[4*i+0])) # put the sbox here

def bitwise_balls(a, b):
    tmp = a & b
    result = 0
    for i in range(32):
        result ^= Extract(i, i, tmp)
    return ZeroExt(31,result) << 31

for i in range(8):
    for j in range(8):
        reg[j] = bitwise_balls(reg[j], state[i]) | LShR(reg[j], 1)

for i in range(8):
    S.add(reg[i] == MAGIC[i])

while S.check() == sat:
    m = S.model()
    flag_result = ''.join(chr(m[flag[i]].as_long()) for i in range(len(flag)))
    print(f'Flag: {flag_result}')
    S.add(Or([flag[i] != m[flag[i]] for i in range(len(flag))]))  # Prevents finding the same solution again




# midnight{...l...Z...4...T...b..}