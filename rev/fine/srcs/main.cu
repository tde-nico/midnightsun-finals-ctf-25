#include <iostream>
#include <cuda.h>
#include <curand_kernel.h>
#include <map>



// https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html
#define CHECK(val) check_cuda( (val), #val, __FILE__, __LINE__ )
void check_cuda(cudaError_t res, const char *func, const char *file, const int line)
{
	if (!res)
		return ;
	std::cerr << "CUDA error = " << static_cast<unsigned int>(res);
	std::cerr << " at " << file << ":" << line << " '" << func << "' \n";
	cudaDeviceReset();
	exit(1);
}

// __device__ unsigned char sbox[] = {0x96, 0xf4, 0x25, 0x71, 0xf5, 0x76, 0x32, 0xe3, 0xd4, 0x4e, 0x23, 0xec, 0x22, 0xa6, 0x8e, 0x4c, 0xdd, 0x97, 0x88, 0x9e, 0x2a, 0x91, 0x11, 0x87, 0x84, 0xae, 0x79, 0x68, 0xff, 0x49, 0x34, 0xf9, 0xad, 0x16, 0xb0, 0x74, 0x5a, 0xfe, 0xeb, 0xc, 0xa7, 0x30, 0xfc, 0x83, 0x36, 0xea, 0x8d, 0x8f, 0x45, 0xa2, 0xc5, 0x56, 0x3e, 0xe, 0xc6, 0xf2, 0xe8, 0xf, 0xd0, 0xb2, 0x10, 0x4f, 0xf7, 0xb7, 0x9f, 0xf0, 0xf1, 0x7c, 0x31, 0xc2, 0x2f, 0xe0, 0xa1, 0x18, 0x99, 0xa3, 0xfb, 0x21, 0xe2, 0x8b, 0x24, 0x9b, 0xa8, 0x47, 0x1d, 0xcc, 0xe9, 0xc0, 0x1, 0x41, 0xd, 0x64, 0x26, 0xfd, 0x9, 0xdf, 0x42, 0xc3, 0x81, 0x8c, 0xd5, 0xc9, 0xbc, 0x15, 0x2c, 0x3, 0xfa, 0xcf, 0xda, 0x1c, 0x80, 0x70, 0x7, 0x2, 0x1f, 0x39, 0x66, 0x73, 0x1e, 0x85, 0x12, 0xd1, 0x9d, 0x4d, 0xc8, 0xcb, 0xbb, 0x8, 0x13, 0xba, 0xf6, 0x1b, 0xd9, 0x17, 0x3a, 0x27, 0x61, 0x54, 0x38, 0x8a, 0x7f, 0x37, 0x2d, 0x5f, 0xca, 0x5c, 0x5e, 0x63, 0xc4, 0x20, 0xde, 0xa9, 0x67, 0xa0, 0x7a, 0x3d, 0x52, 0x48, 0x2e, 0xbf, 0x9a, 0xdc, 0x6b, 0x93, 0x9c, 0xbe, 0x7d, 0xb4, 0x14, 0x57, 0x90, 0x40, 0x5, 0xd8, 0xb3, 0xcd, 0x51, 0x33, 0x44, 0x53, 0x6, 0x35, 0x6e, 0x29, 0xdb, 0x72, 0xb9, 0xb5, 0xaa, 0x43, 0xee, 0xd6, 0x62, 0x82, 0x6f, 0x59, 0x2b, 0x86, 0xbd, 0x75, 0xd7, 0x95, 0x94, 0xe4, 0xe6, 0xc1, 0x3b, 0x6d, 0x65, 0x1a, 0xb, 0xf8, 0x60, 0xb6, 0xf3, 0x98, 0x5b, 0x3f, 0xd2, 0xce, 0x89, 0x78, 0xe1, 0x77, 0x46, 0x3c, 0xac, 0xb8, 0xaf, 0xed, 0xa4, 0xd3, 0x58, 0x5d, 0xab, 0x0, 0x28, 0x69, 0x4, 0xa, 0xef, 0x6c, 0x55, 0x7e, 0x92, 0x7b, 0x4b, 0xe5, 0x4a, 0x19, 0xa5, 0xb1, 0xc7, 0xe7, 0x6a, 0x50, 0x11, 0x11, 0x11, 0x11, 0x22, 0x22, 0x22, 0x22, 0x33, 0x33, 0x33, 0x33, 0x44, 0x44, 0x44, 0x44, 0x55, 0x55, 0x55, 0x55, 0x66, 0x66, 0x66, 0x66, 0x77, 0x77, 0x77, 0x77, 0x88, 0x88, 0x88, 0x88, 0x70, 0x7, 0x1};
// __device__ unsigned char sbox[] = {0x96, 0xf4, 0x25, 0x71, 0xf5, 0x76, 0x32, 0xe3, 0xd4, 0x4e, 0x23, 0xec, 0x22, 0xa6, 0x8e, 0x4c, 0xdd, 0x97, 0x88, 0x9e, 0x2a, 0x91, 0x11, 0x87, 0x84, 0xae, 0x79, 0x68, 0xff, 0x49, 0x34, 0xf9, 0xad, 0x16, 0xb0, 0x74, 0x5a, 0xfe, 0xeb, 0x0c, 0xa7, 0x30, 0xfc, 0x83, 0x36, 0xea, 0x8d, 0x8f, 0x45, 0xa2, 0xc5, 0x56, 0x3e, 0x0e, 0xc6, 0xf2, 0xe8, 0xf, 0xd0, 0xb2, 0x10, 0x4f, 0xf7, 0xb7, 0x9f, 0xf0, 0xf1, 0x7c, 0x31, 0xc2, 0x2f, 0xe0, 0xa1, 0x18, 0x99, 0xa3, 0xfb, 0x21, 0xe2, 0x8b, 0x24, 0x9b, 0xa8, 0x47, 0x1d, 0xcc, 0xe9, 0xc0, 0x1, 0x41, 0xd, 0x64, 0x26, 0xfd, 0x9, 0xdf, 0x42, 0xc3, 0x81, 0x8c, 0xd5, 0xc9, 0xbc, 0x15, 0x2c, 0x3, 0xfa, 0xcf, 0xda, 0x1c, 0x80, 0x70, 0x7, 0x2, 0x1f, 0x39, 0x66, 0x73, 0x1e, 0x85, 0x12, 0xd1, 0x9d, 0x4d, 0xc8, 0xcb, 0xbb, 0x08, 0x13, 0xba, 0xf6, 0x1b, 0xd9, 0x17, 0x3a, 0x27, 0x61, 0x54, 0x38, 0x8a, 0x7f, 0x37, 0x2d, 0x5f, 0xca, 0x5c, 0x5e, 0x63, 0xc4, 0x20, 0xde, 0xa9, 0x67, 0xa0, 0x7a, 0x3d, 0x52, 0x48, 0x2e, 0xbf, 0x9a, 0xdc, 0x6b, 0x93, 0x9c, 0xbe, 0x7d, 0xb4, 0x14, 0x57, 0x90, 0x40, 0x05, 0xd8, 0xb3, 0xcd, 0x51, 0x33, 0x44, 0x53, 0x06, 0x35, 0x6e, 0x29, 0xdb, 0x72, 0xb9, 0xb5, 0xaa, 0x43, 0xee, 0xd6, 0x62, 0x82, 0x6f, 0x59, 0x2b, 0x86, 0xbd, 0x75, 0xd7, 0x95, 0x94, 0xe4, 0xe6, 0xc1, 0x3b, 0x6d, 0x65, 0x1a, 0x0b, 0xf8, 0x60, 0xb6, 0xf3, 0x98, 0x5b, 0x3f, 0xd2, 0xce, 0x89, 0x78, 0xe1, 0x77, 0x46, 0x3c, 0xac, 0xb8, 0xaf, 0xed, 0xa4, 0xd3, 0x58, 0x5d, 0xab, 0x00, 0x28, 0x69, 0x04, 0x0a, 0xef, 0x6c, 0x55, 0x7e, 0x92, 0x7b, 0x4b, 0xe5, 0x4a, 0x19, 0xa5, 0xb1, 0xc7, 0xe7, 0x6a, 0x50};
__device__ unsigned char sbox[] = {0xc8, 0x7a, 0x58, 0x65, 0x7b, 0x0f, 0x88, 0x69, 0xbf, 0x66, 0x73, 0xf5, 0xa9, 0x1d, 0xd5, 0x1a, 0xd4, 0x67, 0x61, 0x26, 0x31, 0x5f, 0xfb, 0x34, 0x29, 0xf2, 0x49, 0x36, 0x0d, 0x83, 0x1e, 0x42, 0x4c, 0xd0, 0xa5, 0x0b, 0x09, 0x91, 0xe9, 0xdf, 0x72, 0x93, 0xc2, 0xb0, 0x7e, 0x47, 0x30, 0x46, 0x6a, 0x8e, 0x01, 0xe2, 0xe0, 0x81, 0x02, 0x6b, 0x07, 0xdd, 0x70, 0xa4, 0x53, 0x00, 0x41, 0x52, 0x59, 0xaa, 0xf7, 0xc4, 0xd2, 0xed, 0xff, 0x62, 0xf9, 0xe4, 0x95, 0x35, 0x23, 0xa1, 0x20, 0x3b, 0x0a, 0x2c, 0x5c, 0x9b, 0x22, 0xb3, 0xf3, 0x9a, 0x2b, 0x19, 0xce, 0x54, 0x82, 0xef, 0xad, 0x06, 0x5d, 0xec, 0x3a, 0xd8, 0x9f, 0x0c, 0x80, 0x2a, 0x44, 0x99, 0xd7, 0xb5, 0xe7, 0x4d, 0xb4, 0x39, 0xe5, 0x4a, 0xc7, 0x40, 0x3d, 0x87, 0x21, 0x4b, 0xbb, 0x89, 0x45, 0x50, 0xd6, 0xaf, 0x60, 0xbd, 0x11, 0x3e, 0xcc, 0xba, 0x6d, 0x84, 0xe3, 0xbe, 0xa8, 0x94, 0x55, 0x7c, 0xd3, 0x25, 0x9d, 0x38, 0xb7, 0xb6, 0x8a, 0x85, 0xf0, 0x33, 0xf4, 0x1b, 0x1c, 0xd9, 0xd1, 0xb1, 0x90, 0x3f, 0x98, 0xc9, 0xfc, 0xe1, 0x68, 0x32, 0x86, 0x37, 0xcf, 0x4e, 0xc1, 0x4f, 0x10, 0x15, 0xa2, 0x04, 0x64, 0xbc, 0xc5, 0x9c, 0x18, 0x0e, 0x8d, 0xcb, 0x14, 0x74, 0x56, 0x6c, 0xca, 0x8b, 0x7f, 0x79, 0xa6, 0x96, 0xf8, 0xb9, 0x97, 0xfd, 0xa0, 0x16, 0xdb, 0xfa, 0xea, 0x2d, 0xa7, 0xde, 0x3c, 0x13, 0x1f, 0x03, 0x6f, 0xdc, 0xab, 0x12, 0x5b, 0xf6, 0x24, 0xc3, 0x17, 0xda, 0xb8, 0xc6, 0xe8, 0x9e, 0xcd, 0x92, 0xa3, 0x7d, 0xe6, 0x05, 0x57, 0x43, 0x5a, 0x8f, 0x28, 0xc0, 0x48, 0xac, 0xb2, 0x5e, 0x51, 0x27, 0xeb, 0x63, 0xee, 0x8c, 0xfe, 0xae, 0x2e, 0x76, 0x78, 0xf1, 0x6e, 0x08, 0x2f, 0x77, 0x71, 0x75};

__global__ void	brute() {
	unsigned char	block[4];
	block[0] = threadIdx.x;
	block[1] = blockIdx.x;
	block[2] = blockIdx.y;
	block[3] = blockIdx.z;

	if (block[0] < 32 || block[0] > 127 ||
		block[1] < 32 || block[1] > 127 ||
		block[2] < 32 || block[2] > 127 ||
		block[3] < 32 || block[3] > 127) {
		return ;
	}

	// midnight{AAAlAAAZAAA4AAATAAAbAA}

	unsigned char flag[32] = {0};
	// 0
	flag[0] = 'm';
	flag[1] = 'i';
	flag[2] = 'd';
	flag[3] = 'n';
	
	// 1
	flag[4] = 'i';
	flag[5] = 'g';
	flag[6] = 'h';
	flag[7] = 't';
	
	// 2
	flag[8] = '{';
	flag[9] = block[1];
	flag[10] = block[2];
	flag[11] = block[3];
	// flag[9] = 'A';
	// flag[10] = 'A';
	// flag[11] = 'A';
	
	// 3
	flag[12] = 'l';
	// flag[12] = block[0];
	flag[13] = block[1];
	flag[14] = block[2];
	flag[15] = block[3];
	// flag[13] = 'A';
	// flag[14] = 'A';
	// flag[15] = 'A';
	
	// 4
	flag[16] = 'Z';
	// flag[16] = block[0];
	flag[17] = block[1];
	flag[18] = block[2];
	flag[19] = block[3];
	// flag[17] = 'A';
	// flag[18] = 'A';
	// flag[19] = 'A';
	
	// 5
	flag[20] = '4';
	// flag[20] = block[0];
	flag[21] = block[1];
	flag[22] = block[2];
	flag[23] = block[3];
	// flag[21] = 'A';
	// flag[22] = 'A';
	// flag[23] = 'A';
	
	// 6
	flag[24] = 'T';
	// flag[24] = block[0];
	flag[25] = block[1];
	flag[26] = block[2];
	flag[27] = block[3];
	// flag[25] = 'A';
	// flag[26] = 'A';
	// flag[27] = 'A';
	
	// 7
	flag[28] = 'b';
	// flag[28] = block[0];
	flag[29] = block[1];
	flag[30] = block[2];
	// flag[29] = 'A';
	// flag[30] = 'A';
	flag[31] = '}';


	uint32_t registers[] = {0x11111111, 0x22222222, 0x33333333, 0x44444444, 0x55555555, 0x66666666, 0x77777777, 0x88888888};
	unsigned char state[32];

	for (int i = 0; i < 32; i++) {
		state[i] = sbox[flag[i]];
	}

	for (int i = 0; i < 8; i++) {
		uint32_t s = ((uint32_t *)(state))[i];
		for (int j = 0; j < 8; j++) {
			uint32_t parity = 0;
			uint32_t reg = registers[j];
			for (int k = 0; k < 32; k += 2) {
				uint32_t bits = s >> (k & 0x1f);
				if ((bits & 1) != 0) {
					parity = reg >> (k & 0x1f) ^ parity;
				}
				if ((bits & 2) != 0) {
					parity = reg >> (k & 0x1f | 1) ^ parity;
				}
			}
			registers[i] = parity << 0x1f | reg >> 1;
		}

		uint32_t temp0 = registers[0];
        uint32_t temp1 = registers[1];
        uint32_t temp2 = registers[2];
        uint32_t temp3 = registers[3];
        uint32_t temp4 = registers[4];
        uint32_t temp5 = registers[5];
        uint32_t temp6 = registers[6];
        uint32_t temp7 = registers[7];

        registers[0] = temp4;
        registers[4] = temp0;
        registers[1] = temp2;
        registers[2] = temp1;
        registers[3] = temp5;
        registers[5] = temp3;
        registers[6] = temp7;
        registers[7] = temp6;
	}


	// printf("register0: %d\n", registers[0]); // 2004318071
	// printf("register1: %d\n", registers[1]); // 322122547
	// printf("register2: %d\n", registers[2]); // -268435457
	// printf("register3: %d\n", registers[3]); // 568188381
	// printf("register4: %d\n", registers[4]); // 715827882
	// printf("register5: %d\n", registers[5]); // -653192943
	// printf("register6: %d\n", registers[6]); // 1932735283
	// printf("register7: %d\n", registers[7]); // 35791394
	// return;

	for (int i = 0; i < 8; ++i) {
		if (i != 0 || i != 4) {
			continue;
		}
		uint32_t r = registers[i];
		if (r == -1877929711 ||
			r == 2417037585 ||
			r == -1205722590 ||
			r == 3089244706 ||
			r == 709116996 ||
			r == 674444083 ||
			r == 41383799 ||
			r == -1168812715 ||
			r == 3126154581 ||
			r == 42502280 ||
			r == -1838782874 ||
			r == 2456184422) {
			printf("Found block %d : %u : 0x%x 0x%x 0x%x 0x%x -> %c%c%c%c\n", i, r, block[0], block[1], block[2], block[3], block[0], block[1], block[2], block[3]);
		}
	}

	// if (registers[0] == 2004318071) {
	// 	printf("Found block 0: 0x%x 0x%x 0x%x 0x%x -> %c%c%c%c\n", block[0], block[1], block[2], block[3], block[0], block[1], block[2], block[3]);
	// }
	// if (registers[4] == 715827882) {
	// 	printf("Found block 4: 0x%x 0x%x 0x%x 0x%x -> %c%c%c%c\n", block[0], block[1], block[2], block[3], block[0], block[1], block[2], block[3]);
	// }

	// if (registers[1] == 322122547) {
	// 	printf("Found block 1: 0x%x 0x%x 0x%x 0x%x -> %c%c%c%c\n", block[0], block[1], block[2], block[3], block[0], block[1], block[2], block[3]);
	// }
	// if (registers[2] == -268435457) {
	// 	printf("Found block 2: 0x%x 0x%x 0x%x 0x%x -> %c%c%c%c\n", block[0], block[1], block[2], block[3], block[0], block[1], block[2], block[3]);
	// }

	// if (registers[3] == 836623837) {
	// 	printf("Found block 3: 0x%x 0x%x 0x%x 0x%x -> %c%c%c%c\n", block[0], block[1], block[2], block[3], block[0], block[1], block[2], block[3]);
	// }
	// if (registers[5] == 4026531841) {
	// 	printf("Found block 5: 0x%x 0x%x 0x%x 0x%x -> %c%c%c%c\n", block[0], block[1], block[2], block[3], block[0], block[1], block[2], block[3]);
	// }

	// if (registers[6] == 1731408691) {
	// 	printf("Found block 6: 0x%x 0x%x 0x%x 0x%x -> %c%c%c%c\n", block[0], block[1], block[2], block[3], block[0], block[1], block[2], block[3]);
	// }
	// if (registers[7] == 295279001) {
	// 	printf("Found block 7: 0x%x 0x%x 0x%x 0x%x -> %c%c%c%c\n", block[0], block[1], block[2], block[3], block[0], block[1], block[2], block[3]);
	// }
}

/*
var0 = -1877929711 // 2417037585
var1 = -1205722590 // 3089244706
var2 = 709116996
var3 = 674444083
var4 = 41383799
var6 = -1168812715 // 3126154581
var7 = 42502280
var8 = -1838782874 // 2456184422
*/

int main(void)
{
	clock_t			start;
	clock_t			stop;

	dim3	blocks(256, 256, 256);
	dim3	threads(256);

	start = clock();

	brute<<<blocks, threads>>>();
	CHECK(cudaGetLastError());
	CHECK(cudaDeviceSynchronize());

	stop = clock();
	std::cerr << "Took: " << ((double)(stop - start)) / CLOCKS_PER_SEC << "\n";

	return (0);
}